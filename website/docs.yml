packages:
  DOM:
    icon: sitemap
    classes:
      Node:
        description: ""
        icon: check-empty
        methods:
          - name: "append(node,node,...)"
            type: fn
            description: "Appends (inserts) the given nodes to self."
            example: |
              parent = Element.create('.parent')
              node = Element.create('.node')
              parent.append node
          - name: "first(selector = '*')"
            type: fn
            description: "Returns the first descendant matching selector"
            example: |
              parent = Element.create('.parent')
              node = Element.create('.node')
              p = Element.create p
              parent.append node, p
              console.log parent.first("p").tag
              # p
          - name: "last(selector = '*')"
            type: fn
            description: "Returns the last descendant matching selector"
            example: |
              parent = Element.create('.parent')
              node = Element.create('.node')
              p = Element.create p
              parent.append p, node
              console.log parent.last(".node").tag
              # div
          - name: "all(selector = '*')"
            type: fn
            description: "Return all descendants matching the selector"
          - name: "empty()"
            type: fn
            description: "Removes all child nodes"
          - name: "moveUp()"
            type: fn
            description: "Moves self before the previous element"
          - name: "moveDown()"
            type: fn
            description: "Moves self after the next element"
          - name: "delegateEventListener(expression, handler)"
            type: fn
            description: |
              Delegates events acconding to the expression:     
              **event**:*selector*    
              **click**:*a[href]*
            example: |
              document.body.delegateEventListener 'click:*', (e) ->
                console.log e.tag
              # tag of the clicked element
          - name: "addEvent"
            type: fn
            description: "Alias for addEventListener"
          - name: "removeEvent"
            type: fn
            description: "Alias for aremoveEventListener"
          - name: "delegateEvent"
            type: fn
            description: "Alias for delegateEventListener"
      NodeList:
        description: "Extensions for NodeList."
        icon: "th-list"
        methods:
          - name: "forEach(fn)"
            description: "Iterates through the element in the node list."
            type: fn
            example: |
              document.all("h1").forEach (el) ->
                console.log el
          - name: "map(fn)"
            description: "Creates an array with the results of calling a provided function on every element in the node list."
            type: fn
            example: |
              console.log document.all("h1").map (el) ->
                el.text
          - name: "pluck"
            description: ""
            type: "fn"
            example: |
              console.log document.all("h1").pluck 'text'
              # [...]
          - name: "include"
            description: ""
            type: "fn"
            example: |
              h1 = document.first("h1")
              document.body.inlcude(h1)
              # false
          - name: "first"
            description: ""
            type: "prop"
            example: |
              h1 = document.all("h1").first
              console.log h1
              # Element
          - name: "last"
            description: ""
            type: "prop"
            example: |
              h1 = document.all("h1").last
              console.log h1
              # Element
      HTMLElement:
        description: ""
        icon: "sign-blank"
        methods:
          - name: "create(zen)"
            type: self
            description: |
              Shortcut for creating element via zen string.           
              
              *  **[type=text][hidden]** - attributes
              *  **.class1.class2** - classes
              *  **#id** - id
            example: |
              input = Element.create("input.class#id[type=text]")
              console.log input.class input.getAttribute 'type'
              # class, id, text
          - name: "dispose()"
            type: fn
            description: "Removes element from the dom."
            example: |
              document.body.append Element.create()
              document.body.last().dispose()
          - name: "ansector(selector = '*')"
            type: fn
            description: "Returns the first ansector matching the selector"
            example: |
              html = document.body.ansector 'html'
              console.log html.tag
              # html
          - name: "next(selector = '*')"
            type: fn
            description: "Returns the first element from next siblings matching the given selector"
            example: |
              el = document.head.next()
              console.log el.tag
              # body
          - name: "prev(selector = '*')"
            type: fn
            description: "Returns the first element from previous siblings matching the given selector"
            example: |
              el = document.head.prev()
              console.log el.tag
              # head
          - name: "css(property[, value])"
            type: fn
            description: "Sets / gets css properties"
            example: |
              console.log document.body.css 'background-color'
              # document.body.css 'background-color', '#fff'
              # #fff
          - name: "tag"
            type: prop
            description: "Alias for tagName but lowercase"
            example: |
              div = Element.create "div"
              console.log div.tagName.toLowerCase() is div.tag
              # true
          - name: "html"
            type: prop
            description: "Alias for innerHTML"
            example: |
              el = Element.create 'div'
              el.html = 'text'
              console.log el.innerHTML
              # text
          - name: "text"
            type: prop
            description: "Alias for textContent"
            example: |
              el = Element.create 'div'
              el.text = 'text'
              console.log el.textContent
              # text
          - name: "class"
            type: prop
            description: "Alias for className"
            example: |
              el = Element.create 'div'
              el.class = 'text'
              console.log el.className
              # text
          - name: "parent"
            type: prop
            description: "Gets / sets the parent of the element"
            example: |
              el = Element.create 'div'
              el.parent = document.body
              console.log document.contains(el)
              # true
      HTMLInputElement:
        description: ""
        icon: ""
        methods:
          - name: "caretToEnd"
            type: "fn"
            description: "Moves the caret of the element to the end when focused."
      HTMLSelectElement:
        description: ""
        icon: ""
        methods:
          - name: "selectedOption"
            type: prop
            description: Sets / Gets the selected option element of the select.
      DocumentFragment:
        description: ""
        icon: ""
        methods:
          - name: "create()"
            type: fn
            description: Alias for document.createDocumentFragment()
          - name: "remove(el)"
            type: fn
            description: Removes **el** from the document fragment
          - name: "children"
            type: prop
            description: Alias for **childnodes**
  Logging:
    icon: 'align-left'
    classes:
      Logger:
        description: |
        icon: 'align-left'
    icon: cogs
    classes: []
  NW:
    icon: hdd
    classes:
      Dialogs:
        description: |
        icon: 'list-alt'
      File:
        description: |
        icon: 'file'
  Utils:
    icon: wrench
    classes:
      History:
        description: |
        icon: 'bookmark'
      i18n:
        description: |
          Locale Management
          </br>
          Default locale is read from the html lang attribute.
        icon: 'globe'
        methods:
          - type: self
            name: t(path, *data = {}, *locale = 'en' )
            description: "Get translation for given path."
            example: |
              i18n.locales.en = social: {join: 'Joins us today!'}
              console.log i18n.t 'social.join'
              # "Join us today!"
          - type: self
            name: locales = {}
            description: 'This property contanes the  translations'
            example: |
      Request:
        description: "A very simple XMLHTTPRequest wrapper."
        icon: "link"
        methods:
          - type: new
            name: "constructor(url, headers = {})"
            description: "Creates a new Request instance."
            example: |
              r = new Request('/example.json')
              r.get (response) ->
                console.log response.body.message
                console.log response.raw
              # Object
          - type: fn
            name: "get(*data = {}, callback)"
            description: "Start a request with GET method."
            example: |
              r = new Request('/example.json')
              r.get (response) ->
                console.log response.body.message
                console.log response.raw
              # Object
          - type: fn
            name: "post(*data = {}, callback)"
            description: "Start a request with POST method."
            example: |
              r = new Request('/example.json')
              r.post (response) ->
                console.log response.body.message
                console.log response.raw
              # Object
  Types:
    icon: book
    classes:
      Unit:
        description: "PX / EM conversion"
        icon: "text-height"
        methods:
          - name: 'constructor(value = "0px", basePx = 16)'
            type: new
            description: "Creates a new Unit instance."
            example: |
              u = new Unit()
              console.log u.px
              # 0px
          - name: 'set(value = "0px")'
            type: fn
            description: "Sets self value"
            example: |
              u = new Unit()
              u.set '10px'
              console.log u.px
              # 10px
          - name: "base"
            type: prop
            description: "Base pixel size for calculating em"
            example: |
              u = new Unit()
              u.base = 24
              u.set '12px'
              console.log u.em
              # 0.5em
          - name: "px"
            type: prop
            description: "Returns self value in pixels"
            example: |
              u = new Unit()
              u.set '10px'
              console.log u.px
              # 10px
          - name: "em"
            type: prop
            description: "Returns self value in ems"
            example: |
              u = new Unit()
              u.set '8px'
              console.log u.em
              # 0.5em
      Number:
        description: |
        icon: 'plus'
        methods:
          - name: "upto(n, fn = (i) ->, bound = @)"
            type: fn
            description: "Iterates from self up to n"
            example: |
              (0).upto 5, (i)->
                console.log i
              # 0 1 2 3 4 5
          - name: "downto(n, fn = (i) ->, bound = @)"
            type: fn
            description: "Iterates from self down to n"
            example: |
              (5).downto 0, (i)->
                console.log i
              # 5 4 3 2 1 0
          - name: "times(fn = (i) ->, bound = @)"
            type: fn
            description: "Runs fn self times"
            example: |
              (4).times (i)->
                console.log i
              # 1 2 3 4
          - name: "clamp(lowerLimit, upperLimit)"
            type: fn
            description: "Returns the lowerLimit if self is smaller then lowerLimit, upperLimit if self is bigger than upperLimit else returns self."
            example: |
              console.log (10).clamp 5, 8
              console.log (10).clamp 5, 12
              console.log (10).clamp 12, 14
              # 8, 10, 12
          - name: "clampRange(lowerLimit, upperLimit)"
            type: fn
            description: "Same as calmp but returns remainder subtracted or added"
            example: |
              console.log (370).clampRange 0, 360
              console.log (-20).clampRange 0, 360
              # 10, 340
          - name: "seconds"
            type: prop
            description: "Returns slef seconds in milliseconds"
            example: |
              console.log (1).seconds
              # 1000
          - name: "minutes"
            type: prop
            description: "Returns slef minutes in milliseconds"
            example: |
              console.log  (1).minutes
              # 60 000
          - name: "hours"
            type: prop
            description: "Returns slef hours in milliseconds"
            example: |
              console.log  (1).hours
              # 3 600 00
          - name: "days"
            type: prop
            description: "Returns slef days in milliseconds"
            example: |
              console.log  (1).days
              # 86 400 000
      Function:
        description: |
        icon: 'bolt'
        methods:
          - name: "delay(n = 0)"
            type: fn
            description: "Delays the function for n milliseconds."
            example: |
              f = ->
                console.log 'Yey'
              f.delay 2000
              # returns interval id
          - name: "periodical(n = 0)"
            type: fn
            description: "Runs the function every n milliseconds."
            example: |
              f = ->
                console.log 'Yey'
              id = f.periodical 500
              # returns interval id
              (-> clearInterval(id)).delay 2000
      Object:
        description: |
        icon: 'asterisk'
        methods:
          - name: "toFormData()"
            type: fn
            description: "Creates FormData from the object for XMLHTTPRequest."
            example: |
              o = {a: '1', b: '2'}
              console.log o.toFormData()
              # [object FormData]
          - name: "toQueryString()"
            type: fn
            description: "Creates query string from the objects properties"
            example: |
              o = {a: '1', b: '2'}
              console.log o.toQueryString()
              # a=1&b=2
          - name: "each(object, fn = (key,value) ->)"
            type: self
            description: "Iterates through the object properties / values."
            example: |
              o = {a: '1', b: '2'}
              Object.each o, (key,value) -> console.log key+":"+value
              # a:1 b:2
          - name: "pluck(object, property)"
            type: self
            description: "Returns properties form values."
            example: |
              o = {luke: {side: 'light'}, vader: {side: 'dark'}}
              console.log Object.pluck o, 'side'
              # [light,dark]
          - name: "values(object)"
            type: self
            description: "Returns the objects values."
            example: |
              o = {a: '1', b: '2'}
              console.log Object.values o
              # 1,2
          - name: "canRespondTo(object, 'fn1', 'fn2', ...)"
            type: self
            description: "Returns true if the object has all functions passed as arguments."
            example: |
              o = x: ->
              console.log Object.canRespondTo o, 'x'
              # true
      Color:
        description: |
        icon: 'beaker'
        methods:
          - name: "constructor(colorString)"
            type: new
            description: "Creates a new Color instance from the given string."
            example: |
              c = new Color('#ff0000')
              console.log c.rgba
              # rgba(255,0,0,1)

          - name: invert()
            type: fn
            description: 'Returns a new Color which is inverse of the color.'
            example: |
              c = new Color("#fff")
              console.log c.invert().hex
              # 000000
          - name: mix(otherColor, precentage = 50)
            type: fn
            description: 'Mixes together two colors. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage.'
            example: |
              c = new Color("#fff")
              console.log c.mix("#000").hex
              # 7F7F7F

          - name: "alpha"
            type: prop
            description: "Sets / Gets the alpha (opacity) property of the color."
            example: |
              c = new Color('#ff0000')
              c.alpha = 10
              console.log c.rgba
              # rgba(255,0,0,0.1)

          - name: "hue"
            type: prop
            description: "Sets / Gets the hue of the color."
            example: |
              c = new Color('#ff0000')
              c.hue = 120
              console.log c.hex
              # 00FF00
          - name: "saturation"
            type: prop
            description: "Sets / Gets the saturation of the color."
            example: |
              c = new Color('#ff0000')
              c.saturation = 50
              console.log c.hex
              # BF4040
          - name: "lightness"
            type: prop
            description: "Sets / Gets the lightness of the color."
            example: |
              c = new Color('#fff')
              c.lightness = 50
              console.log c.hex
              # 808080

          - name: "red"
            type: prop
            description: "Sets / Gets the red property of the color."
            example: |
              c = new Color('#ff0000')
              c.red = 204
              console.log c.hex
              # #cc0000
          - name: "green"
            type: prop
            description: "Sets / Gets the green property of the color."
            example: |
              c = new Color('#000000')
              c.green = 204
              console.log c.hex
              # #00cc00
          - name: "blue"
            type: prop
            description: "Sets / Gets the red property of the color."
            example: |
              c = new Color('#000000')
              c.blue = 204
              console.log c.hex
              # #0000cc

          - name: "rgba"
            type: prop
            description: "Returns the rgba string representation of the color"
            example: |
              c = new Color('#ff0000')
              console.log c.rgba
              # rgba(255,0,0,1)
          - name: "rgb"
            type: prop
            description: "Returns the rgb string representation of the color"
            example: |
              c = new Color('#ff0000')
              console.log c.rgb
              # rgba(255,0,0)
          - name: "hsl"
            type: prop
            description: "Returns the hsl string representation of the color"
            example: |
              c = new Color('#ff0000')
              console.log c.hsl
              # hsl(0,100%,50%)
          - name: "hsla"
            type: prop
            description: "Returns the hsla string representation of the color"
            example: |
              c = new Color('#ff0000')
              console.log c.hsla
              # hsla(0,100%,50%,1)
          - name: "hex"
            type: prop
            description: "Sets/Gets the hex representation of the color"
            example: |
              c = new Color('#ff0000')
              console.log c.hex
              # FF0000
      String:
        description: |
        icon: 'strikethrough'
        methods:
          - name: test(regexp)
            type: fn
            description: 'Works like match but returns true or false'
            example: |
              s = 'deathstar'
              console.log s.test /star/
              # true
          - name: escape()
            type: fn
            description: 'Escapes the string for regexp'
            example: |
              s = "\\'$"
              console.log s.escape()
              # \\\'\$
          - name: ellipsis(length = 10)
            type: fn
            description: 'Cuts off and inserts ellipsis(…) at given length'
            example: |
              s = "This is a long text and will be cut off."
              console.log s.ellipsis(14)
              # This is a long...
          - name: compact()
            type: fn
            description: 'Removes extra whitespace'
            example: |
              s = "There are    multiple   whitespace in    this!"
              console.log s.compact()
              # There are multiple whitespace in this!
          - name: camelCase()
            type: fn
            description: 'Converts -, space, _ to camelcase'
            example: |
              s = "This-will be_converted"
              console.log s.camelCase()
              # ThisWillBeConverted
          - name: hyphenate()
            type: fn
            description: 'Converts a camelcased string to a hyphenated string'
            example: |
              s = "ThisWillBeConverted"
              console.log s.hyphenate()
              # this-will-be-converted
          - name: capitalize()
            type: fn
            description: 'Converts the first letter of each word in a string to uppercase'
            example: |
              s = "this will be converted"
              console.log s.capitalize()
              # This Will Be Converted
          - name: indent(n = 2)
            type: fn
            description: 'Indents all lines of the string by n spaces'
            example: |
              s = "This will be indented."
              console.log '"'+s.indent()+'"'
              # "  This will be indented"
          - name: outdent(n = 2)
            type: fn
            description: 'Outdents all lines of the string by n spaces'
            example: |
              s = "  This will be outdented."
              console.log '"'+s.outdent()+'"'
              # "This will be outdented"
          - name: entities()
            type: fn
            description: 'Converts <,>, &, " into their html entities.'
            example: |
              s = "<>&\""
              console.log s.entities()
              # &amp;lt;&amp;gt;&amp;amp;&amp;quot;
          - name: parseQueryString()
            type: fn
            description: 'Parses the string as query string'
            example: |
              s = "q=search%20string"
              console.log s.parseQueryString().q
              # search string
          - name: wordWrap(width = 15, separator = "\n", cut = false)
            type: fn
            description: 'Inserts separator at every width character. If cut is true then words will be cut when necessary.'
            example: |
              s = "Luke is awesome"
              console.log s.wordWrap 7, ':'
              # Luke is :awesome
          - name: random(length = 10)
            type: self
            description: 'Generates a random string'
            example: |
              console.log String.random(10)
              # 10 character lenght random string
      Array:
        description: ''
        icon: 'th'
        methods:
          - name: "compact()"
            type: fn
            description: 'Returns a new Array with falsy values removed.'
            example: |
              a = [null, undefined, false, '',0,'Luke','Leia']
              console.log a.compact()
              # Luke, Leia
          - name: "uniq()"
            type: fn
            description: 'Returns a new Array with duplicate values removed.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.uniq()
              # Yoda, Wader, Luke, Leia
          - name: "remove(item)"
            type: fn
            description: 'Removes the first instance of given item from the array.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.remove('Yoda')
              # Wader, Luke, Leia, Yoda, Luke
          - name: "removeAll(item)"
            type: fn
            description: 'Removes all instances of given item from the array.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.removeAll('Yoda')
              # Wader, Luke, Leia, Luke
          - name: "shuffle()"
            type: fn
            description: 'Arranges items in the array randomly.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.shuffle('Yoda')
              # a random combination of the items
          - name: "include()"
            type: fn
            description: 'Return true if the item is included in the array false if not.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.include('Yoda')
              # true
          - name: "pluck()"
            type: fn
            description: 'Returns a new Array of the given property of the items.'
            example: |
              a = [
                {name: 'Wader', side: 'dark'}
                {name: 'Luke', side: 'light'}
              ]
              console.log a.pluck('name')
              # Wader, Luke
          - name: "dup()"
            type: fn
            description: 'Creates a duplicate of the array.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.dup()
              # Yoda, Wader, Luke, Leia, Yoda, Luke
          - name: "sample"
            type: prop
            description: 'Returns a random item from the array.'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.sample
              # Any Star Wars character above
          - name: "first"
            type: prop
            description: 'Returns first item from the array'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.first
              # Yoda
          - name: "last"
            type: prop
            description: 'Returns the last item from the array'
            example: |
              a = ['Yoda','Wader','Luke','Leia','Yoda','Luke']
              console.log a.last
              # Luke
      Date:
        description: "Adds utility functions to the Date object."
        icon: "time"
        methods:
          - type: fn
            name: "format(str)"
            description: "Formats the date according to the given string."
            example: |
              d = new Date("1987-05-28")
              console.log d.format("%Y.%M.%D")
              # 1987.05.28
          - type: prop
            name: ago
            description: 'Returns the literal representation of the time passed (10 seconds ago).'
            example: |
              d = new Date(Date.now()-(2).days)
              console.log d.ago
              # 2 days ago
          - type: prop
            name: day
            description: 'Returns the date portion.'
            example: |
              d = new Date('2012-05-28')
              console.log d.day
              # 28
          - type: prop
            name: hours
            description: 'Returns the hour portion.'
            example: |
              d = new Date('2012-05-28 09:12')
              console.log d.hours
              # 9
          - type: prop
            name: minutes
            description: 'Returns the minutes portion.'
            example: |
              d = new Date('2012-05-28 09:12')
              console.log d.minutes
              # 12
          - type: prop
            name: seconds
            description: 'Returns the seconds portion.'
            example: |
              d = new Date('2012-05-28 09:12:10')
              console.log d.seconds
              # 10
          - type: prop
            name: year
            description: 'Returns the year portion.'
            example: |
              d = new Date('2012-05-28 09:12')
              console.log d.year
              # 2012
          - type: prop
            name: month
            description: 'Returns the month portion.'
            example: |
              d = new Date('2012-05-28 09:12')
              console.log d.month
              # 5
          - type: self
            name: Locale
            description: 'Object that represents the current language data for Date.'
            example: |
              # Get the locale format
              console.log Date.Locale.format
              # %Y-%M-%D
